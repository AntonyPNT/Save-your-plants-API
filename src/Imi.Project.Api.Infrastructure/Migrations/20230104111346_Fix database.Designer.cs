// <auto-generated />
using System;
using Imi.Project.Api.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Imi.Project.Api.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    [Migration("20230104111346_Fix database")]
    partial class Fixdatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("HasApprovedTermsAndConditions")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "28859311-f3d0-4bc5-ac5e-ca5639aed3ae",
                            Email = "admin@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IMI.BE",
                            NormalizedUserName = "IMIADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEBS4MuhR1t/ireSQ/se+mOy6nuZSZINoRQHnEoZskOGxOh3iRt2ZiKlMKX7LYYEhhg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2ba7f385-6d1a-425d-969a-129d8430bac5",
                            TwoFactorEnabled = false,
                            UserName = "ImiAdmin"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b73e9cd0-b0dc-4952-9833-a8e2a34249c4",
                            Email = "user@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@IMI.BE",
                            NormalizedUserName = "IMIUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEPCiXRRNFJLJYEa06AIhPsS9mWyxQvRCpGaMt28nznY5vXQ8db7pFjgG8gSHWp1A2Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5c02f9fa-099b-4086-819b-a16178a1752f",
                            TwoFactorEnabled = false,
                            UserName = "ImiUser"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000003",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "ac4effc6-388d-448b-9efe-6f1ff5783dd8",
                            Email = "refuser@imi.be",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "REFUSER@IMI.BE",
                            NormalizedUserName = "IMIREFUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEPFMvFFB+POI4yVGQJxnPevKZXQmoBHYsJQt78T1wTQWZjsjaAGeco8W0NjKRj3lBA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "70211367-bd98-43a1-a4a3-bcda62e40d1c",
                            TwoFactorEnabled = false,
                            UserName = "ImiRefuser"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000004",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2378fa9b-8c5c-4f35-a033-56aa6b0e3cf1",
                            Email = "antony.p.moreira@gmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANTONY.P.MOREIRA@GMAIL.COM",
                            NormalizedUserName = "ANTONY.P.MOREIRA@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFEe27HlrwTagzG8d8vHcciswn0B0w2NqWNWm18bSzXu7fGjh8MCNmq9Z+ujT78PiA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1c890a84-c1c5-4fe2-b72f-441dfb0be875",
                            TwoFactorEnabled = false,
                            UserName = "antony.p.moreira@gmail.com"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000005",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "22470416-2fcf-42da-8c24-10461637c57a",
                            Email = "terence.joiris@protonmail.com",
                            EmailConfirmed = true,
                            HasApprovedTermsAndConditions = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "TERENCE.JOIRIS@PROTONMAIL.COM",
                            NormalizedUserName = "TERENCE.JOIRIS@PROTONMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEK6k9gjd+D0VT0qbY3kn5KS3JnMABX7Bif6YcWaZHCrF9fAYSv4O3545lDjlsLVtnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "095d850c-eaf5-4b4c-ab23-270092350740",
                            TwoFactorEnabled = false,
                            UserName = "terence.joiris@protonmail.com"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Plant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Plants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000001",
                            Condition = "Healthy",
                            DateOfPurchase = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1333),
                            Image = "images/plant/Anthurium.jpg",
                            Name = "Anthurium"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000001",
                            Condition = "Healthy",
                            DateOfPurchase = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1368),
                            Image = "images/plant/Bamboo.jpg",
                            Name = "Lucky-Bamboo"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000001",
                            Condition = "Healthy",
                            DateOfPurchase = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1372),
                            Image = "images/plant/Croton.jpg",
                            Name = "Croton"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000002",
                            Condition = "Unhealthy",
                            DateOfPurchase = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1375),
                            Image = "images/plant/Dracaena.jpg",
                            Name = "Dracaena"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000002",
                            Condition = "Healthy",
                            DateOfPurchase = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1378),
                            Image = "images/plant/Dracaena-Marginata.jpg",
                            Name = "Dracaena-Marginata"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000002",
                            Condition = "Unhealthy",
                            DateOfPurchase = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1381),
                            Image = "images/plant/Orchid.jpg",
                            Name = "Orchid"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000003",
                            Condition = "Unhealthy",
                            DateOfPurchase = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1384),
                            Image = "images/plant/Peace-Lily.jpg",
                            Name = "Peace-Lily"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000003",
                            Condition = "Healthy",
                            DateOfPurchase = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1387),
                            Image = "images/plant/Ponytail.jpg",
                            Name = "Ponytail"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000004",
                            Condition = "Healthy",
                            DateOfPurchase = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1389),
                            Image = "images/plant/Pothos.jpg",
                            Name = "Pothos"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000004",
                            Condition = "Healthy",
                            DateOfPurchase = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1392),
                            Image = "images/plant/Snake-Plant.jpg",
                            Name = "Snake-Plant"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.PlantAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PlantActions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Name = "water"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Name = "fertilize"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Name = "repot"
                        });
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PlantActionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PlantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PlantActionId");

                    b.HasIndex("PlantId");

                    b.ToTable("Schedules");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000001",
                            Date = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1443),
                            PlantActionId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PlantId = new Guid("00000000-0000-0000-0000-000000000001")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000001",
                            Date = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1449),
                            PlantActionId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PlantId = new Guid("00000000-0000-0000-0000-000000000002")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000001",
                            Date = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1453),
                            PlantActionId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PlantId = new Guid("00000000-0000-0000-0000-000000000003")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000002",
                            Date = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1457),
                            PlantActionId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PlantId = new Guid("00000000-0000-0000-0000-000000000004")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000002",
                            Date = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1461),
                            PlantActionId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PlantId = new Guid("00000000-0000-0000-0000-000000000005")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000002",
                            Date = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1465),
                            PlantActionId = new Guid("00000000-0000-0000-0000-000000000003"),
                            PlantId = new Guid("00000000-0000-0000-0000-000000000006")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000003",
                            Date = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1469),
                            PlantActionId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PlantId = new Guid("00000000-0000-0000-0000-000000000007")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000003",
                            Date = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1473),
                            PlantActionId = new Guid("00000000-0000-0000-0000-000000000002"),
                            PlantId = new Guid("00000000-0000-0000-0000-000000000008")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000004",
                            Date = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1476),
                            PlantActionId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PlantId = new Guid("00000000-0000-0000-0000-000000000009")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            ApplicationUserId = "00000000-0000-0000-0000-000000000004",
                            Date = new DateTime(2023, 1, 4, 12, 13, 46, 240, DateTimeKind.Local).AddTicks(1480),
                            PlantActionId = new Guid("00000000-0000-0000-0000-000000000001"),
                            PlantId = new Guid("00000000-0000-0000-0000-000000000010")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "id",
                            ClaimValue = "00000000-0000-0000-0000-000000000001",
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "nickname",
                            ClaimValue = "ImiAdmin",
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "email",
                            ClaimValue = "admin@imi.be",
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "aproved",
                            ClaimValue = "False",
                            UserId = "00000000-0000-0000-0000-000000000001"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "id",
                            ClaimValue = "00000000-0000-0000-0000-000000000002",
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "nickname",
                            ClaimValue = "ImiUser",
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "email",
                            ClaimValue = "user@imi.be",
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "aproved",
                            ClaimValue = "True",
                            UserId = "00000000-0000-0000-0000-000000000002"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "user",
                            UserId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "id",
                            ClaimValue = "00000000-0000-0000-0000-000000000003",
                            UserId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "nickname",
                            ClaimValue = "ImiRefuser",
                            UserId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "email",
                            ClaimValue = "refuser@imi.be",
                            UserId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "aproved",
                            ClaimValue = "False",
                            UserId = "00000000-0000-0000-0000-000000000003"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "id",
                            ClaimValue = "00000000-0000-0000-0000-000000000004",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "nickname",
                            ClaimValue = "antony.p.moreira@gmail.com",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "email",
                            ClaimValue = "antony.p.moreira@gmail.com",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "aproved",
                            ClaimValue = "True",
                            UserId = "00000000-0000-0000-0000-000000000004"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role",
                            ClaimValue = "admin",
                            UserId = "00000000-0000-0000-0000-000000000005"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "id",
                            ClaimValue = "00000000-0000-0000-0000-000000000005",
                            UserId = "00000000-0000-0000-0000-000000000005"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "nickname",
                            ClaimValue = "terence.joiris@protonmail.com",
                            UserId = "00000000-0000-0000-0000-000000000005"
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "email",
                            ClaimValue = "terence.joiris@protonmail.com",
                            UserId = "00000000-0000-0000-0000-000000000005"
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "aproved",
                            ClaimValue = "True",
                            UserId = "00000000-0000-0000-0000-000000000005"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Plant", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Imi.Project.Api.Core.Entities.Schedule", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Imi.Project.Api.Core.Entities.PlantAction", "PlantAction")
                        .WithMany()
                        .HasForeignKey("PlantActionId");

                    b.HasOne("Imi.Project.Api.Core.Entities.Plant", "Plant")
                        .WithMany()
                        .HasForeignKey("PlantId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Plant");

                    b.Navigation("PlantAction");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Imi.Project.Api.Core.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
